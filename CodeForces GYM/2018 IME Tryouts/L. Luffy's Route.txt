// L. Luffy's Route

#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>
 
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
 
 
#define FASTIO ios::sync_with_stdio(0); cin.tie(0);
#define show(x) cout << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define pi pair     <int,int>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
#define mod(x,m) (x%m + m )%m
#define EPS 1e-9
using namespace std;
using namespace __gnu_pbds;
void ONLINE__JUDGE();
 
typedef tree<ld, null_type, less<ld>, rb_tree_tag,
            tree_order_statistics_node_update>
    ordered_set;
 
pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };
 
const ll MOD = 1e9 + 7;
const ll MAX = 1e5 + 9;
 
ll x , l; deque<pii> vec; vii LIS;
map < pii , ll > mp ; set<pii> s;
ll distance( pii a , pii b )
{
    return abs( a.F - b.F ) + abs( a.S - b.S );
}
 
int main()
{
    FASTIO ONLINE__JUDGE();
 
    cin >> x >> l; vec.pb( {0 , 0} );
    for ( int i = 0; i < x; ++i )
    {
        ll a, b; cin >> a >> b;
        vec.pb( {a , b} );
    }
    vec.pb( {l , 0} );
    sort( all(vec) );
 
    pii ed = {l , 0};
    while ( vec.front().F == 0 ) vec.pop_front();
    vec.push_front({0,0}); LIS.resize( SZ(vec) , 0 );
 
    for ( int i = 0; i < SZ(vec); ++i ) mp[ vec[i] ] = i;
    for ( int i = 0; i < SZ(vec); ++i )
    {
        if ( i > 0 && s.find( vec[i] ) == s.end() ) continue;
        for ( int j = 1; j <= 10; ++j )
            for ( int k = -10; k <= 10; ++k )
            {
                pii nwPoint = { vec[i].F + j , vec[i].S + k };
                if ( distance( vec[i] , nwPoint ) <= 5 )
                {
                    auto it = mp.find( nwPoint );
                    if ( it != mp.end() )
                    {
                        LIS[ it->S ] = max( LIS[ it->S ] , LIS[i] + (nwPoint != ed) );
                        s.insert( nwPoint );
                    }
                }
            }
    }
    cout << LIS[ mp[ ed ] ];
    return 0;
}
 
 
void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}