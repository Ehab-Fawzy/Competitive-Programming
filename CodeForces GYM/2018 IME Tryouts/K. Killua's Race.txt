// K. Killua's Race

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
 
#define FASTIO ios::sync_with_stdio(0); cin.tie(0);
#define show(x) cerr << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define mod(x,m) (x%m + m )%m
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define pi  pair    <int,int>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define OO  (ll)1e18
using namespace std;
using namespace __gnu_pbds;
void ONLINE__JUDGE();
 
typedef tree<ll, null_type, less<ll>, rb_tree_tag,
tree_order_statistics_node_update> ordered_set;
pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };
 
const ll MOD = 1e9 + 7;
const ll MAX = 1e5 + 9;
 
struct edge
{
    ll to , cost , Mod;
    edge( ll _to , ll _cost , ll _Mod ){ to = _to; cost = _cost; Mod = _Mod; }
    bool operator < ( const edge e ) const { return cost > e.cost; }
};
 
ll n , m;
vector<edge> adj[MAX];
ll dp[MAX][4];
 
void Dijkstra( ll src = 1 )
{
    dp[src][0] = 0;
    priority_queue<edge> pq; pq.push( {src , 0 , 0} );
 
    while ( !pq.empty() )
    {
        edge e = pq.top(); pq.pop();
        if ( dp[e.to][e.Mod] <= e.cost )
        {
            for ( edge ne : adj[e.to] )
            {
                if ( dp[ne.to][ (e.Mod+ne.Mod)%3 ] > dp[e.to][e.Mod] + ne.cost )
                {
                    dp[ne.to][ (e.Mod+ne.Mod)%3 ] = dp[e.to][e.Mod] + ne.cost;
                    if ( ne.to != n ) pq.push( {ne.to , dp[ne.to][ (e.Mod+ne.Mod)%3 ] , (e.Mod+ne.Mod)%3 } );
                }
            }
        }
    }
}
 
int main()
{
    FASTIO ONLINE__JUDGE();
 
    cin >> n >> m;
    for ( int i = 0; i < m; ++i )
    {
        ll a, b, c; cin >> a >> b >> c;
        adj[a].pb( {b , c , 1} );
        adj[b].pb( {a , c , 1} );
    }
 
    for ( int i = 0; i < MAX; ++i )
        for ( int j = 0; j < 4; ++j ) dp[i][j] = OO;
    Dijkstra();
 
    vector<pair<ll,string>> res;
    res.pb( {dp[n][0] , "me"} );
    res.pb( {dp[n][1] , "Gon"} );
    res.pb( {dp[n][2] , "Killua"} );
    sort( all(res) );
 
    for ( auto i : res ) cout << i.S << "\n";
    return 0;
}
 
 
void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}