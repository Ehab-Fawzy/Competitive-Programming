// G. Gift Swords

#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>
 
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less
 
 
#define FASTIO ios::sync_with_stdio(0); cin.tie(0);
#define show(x) cout << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define pi pair     <int,int>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
#define mod(x,m) (x%m + m )%m
#define EPS 1e-9
using namespace std;
using namespace __gnu_pbds;
void ONLINE__JUDGE();
 
typedef tree<ld, null_type, less<ld>, rb_tree_tag,
            tree_order_statistics_node_update>
    ordered_set;
 
pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };
 
const ll MOD = 1e9 + 7;
const ll MAX = 5e5 + 9;
 
ll   arr[MAX];
vii  vec[MAX];
vii  pFc[MAX];
bool vis[MAX];
bool inO[MAX];
 
void sieve()
{
    for ( int i = 2; i < MAX; ++i )
        for ( int j = i; j < MAX; j += i ) vec[j].pb(i);
 
    for ( int i = 2; i < MAX; ++i )
    {
        if ( !vis[i] )
            for ( int j = i; j < MAX; j += i ) pFc[j].pb(i) , vis[j] = 1;
    }
}
ll getCnt( vii& v )
{
    ll msk = powl( 2 , SZ(v) ) - 1 , res = 0;
    while ( msk > 0 )
    {
        ll fact = 1 , cnt = 0;
        for ( int i = 1 , j = SZ(v)-1; i < (1<<8); i <<= 1 , j-- )
            if ( msk&i ) fact *= v[j] , cnt++;
        msk--;
 
        if ( cnt&1 )    res += arr[fact];
        else            res -= arr[fact];
    }
    return res;
}
 
ll x, y; vii nums;
 
int main()
{
    FASTIO ONLINE__JUDGE();
 
    sieve();
    cin >> x >> y; nums.resize(x);
    for ( ll& i : nums ) cin >> i;
 
    ll cnt = 0, setCnt = 0;
    while ( y-- )
    {
        cin >> x;
        if ( inO[x - 1] )
        {
            inO[x - 1] = 0;
            x = nums[x - 1];
 
            if ( x == 1 )
            {
                setCnt--;
                cnt -= setCnt;
            }
            else
            {
                for ( ll div : vec[x] ) arr[div]--;
                setCnt--;
 
                ll difCnt = getCnt( pFc[x] );
                cnt -= ( setCnt - difCnt );
            }
        }
        else
        {
            inO[x - 1] = 1;
            x = nums[x - 1];
 
            if ( x == 1 )
            {
                cnt += setCnt;
                setCnt++;
            }
            else
            {
                ll difCnt = getCnt( pFc[x] );
                cnt += ( setCnt - difCnt );
                setCnt++;
 
                for ( ll div : vec[x] ) arr[div]++;
            }
        }
        cout << cnt << "\n";
    }
    return 0;
}
 
 
void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}