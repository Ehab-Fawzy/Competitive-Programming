// K. Quantum Stones 
// Dynamic Programming + shortest path (Dijkstra) + Number Theory

#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(0); cin.tie(0);
#define show(x) cout << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define pi pair     <int,int>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
#define mod(x,m) (x%m + m )%m
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const ll MOD = 1e9 + 7;
const ll MAX = 1e6 + 9;
const ll N = 1e4 + 9;

ll newCost[MAX]; bool vis[MAX];
void Sieve()
{
    for ( int i = 0; i < MAX; ++i ) newCost[i] = i;
    for ( int i = 2; i < MAX; ++i )
    {
        if ( vis[i] == 0 )
        {
            for ( int j = i+i; j < MAX; j += i )
            {
                ll newVal = j/i + 2*i; vis[j] = 1;
                newCost[j] = min( newCost[j] , newVal );
            }
        }
    }
}

struct edge
{
    ll to , cost , edgeCost;
    edge( ll _to , ll _cost , ll _edgeCost ){ to = _to; cost = _cost; edgeCost = _edgeCost; }
    bool operator < ( const edge& e ) const { return cost > e.cost; }
    friend ostream& operator << ( ostream& out , edge e ){
    out << e.to << " "  << e.cost << " " << e.edgeCost; return out; }
};

ll q , x , y , k , s , d;
vector<edge> adj[N];
ll dp[N][109];

ll Dijkstra( ll src , ll dist )
{
    for ( int i = 0; i < N; ++i )
        for ( int j = 0; j < 109; ++j ) dp[i][j] = OO;
    dp[src][0] = 0;

    priority_queue<edge> pq; pq.push( {src , 0 , 0} );
    while ( !pq.empty() )
    {
        edge e = pq.top(); pq.pop();
        if ( dp[e.to][e.edgeCost] <= e.cost )
        {
            for ( edge ne : adj[e.to] )
            {
                if ( dp[ne.to][ e.edgeCost + ne.edgeCost ] > dp[e.to][e.edgeCost] + ne.cost && e.edgeCost + ne.edgeCost <= k )
                {
                    dp[ne.to][ e.edgeCost + ne.edgeCost ] = dp[e.to][e.edgeCost] + ne.cost;
                    pq.push( {ne.to , dp[ne.to][ e.edgeCost + ne.edgeCost ] , e.edgeCost + ne.edgeCost } );
                }
            }
        }
    }

    ll mn = OO;
    for ( int i = 0; i <= k; ++i ) mn = min( mn , dp[dist][i] );
    return mn;
}

int main()
{
    FASTIO ONLINE__JUDGE();

    Sieve();

    cin >> q;
    while ( q-- )
    {
        cin >> x >> y >> k;
        for ( int i = 0; i < y; ++i )
        {
            ll u , v , c; cin >> u >> v >> c;
            adj[u].pb( {v , c , 0} );
            adj[v].pb( {u , c , 0} );

            if ( newCost[c] < c )
            {
                adj[u].pb( {v , newCost[c] , 1} );
                adj[v].pb( {u , newCost[c] , 1} );
            }
        }
        cin >> s >> d;

        ll sp = Dijkstra( s , d );
        if ( sp > 1e15 ) cout << -1 << "\n";
        else cout << sp << "\n";

        for ( int i = 0; i <= x+6; ++i ) adj[i].clear();
    }
    return 0;
}


void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}
