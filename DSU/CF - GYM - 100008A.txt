// http://codeforces.com/gym/100008/attachments
// GYM - 100008A


#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(NULL); cin.tie(NULL);
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const int mod = 7901;
const int MAX = 3e5 + 9;

struct DSU
{
    vii parent, Rank;
    DSU( ll N )
    {
        Rank.assign( N+9 , 0 ); parent.assign( N+9 , 0 );
        for ( int i = 0; i <= N; ++i ) parent[i] = i;
    }
    ll findSet ( ll i ) { return parent[i] == i ? i : (parent[i] = findSet(parent[i])); }
    bool isSame( ll i , ll j ) { return findSet(i) == findSet(j); }
    void unionSet( ll i , ll j )
    {
        if ( !isSame( i , j ) )
        {
            ll x = findSet(i) , y = findSet(j);
            if ( Rank[x] > Rank[y] ) parent[y] = x;
            else
            {
                parent[x] = y;
                if ( Rank[x] == Rank[y] ) Rank[y]++;
            }
        }
    }
};
ll q , cnt[MAX];

int main()
{
    FASTIO ONLINE__JUDGE();

    cin >> q;
    while ( q-- )
    {
        ll x , idx = 1; map < string , ll > mp;
        cin >> x; DSU d(MAX);
        for ( int i = 0; i < MAX; ++i ) cnt[i] = 1;
        for ( int i = 0; i < x;   ++i )
        {
            string a , b; cin >> a >> b;
            if ( mp.find(a) == mp.end() ) mp[a] = idx++;
            if ( mp.find(b) == mp.end() ) mp[b] = idx++;

            ll parentA = d.findSet(mp[a]) , parentB = d.findSet(mp[b]) , newParent;

            if ( !d.isSame( parentA , parentB ) )
            {
                d.unionSet( parentA , parentB );
                newParent  = d.findSet(parentA) == parentA && d.findSet(parentB) == parentA ? parentA : parentB;

                if ( newParent == parentA ) cnt[ parentA ] += cnt[ parentB ];
                if ( newParent == parentB ) cnt[ parentB ] += cnt[ parentA ];
            }
            else newParent = parentA;
            cout << cnt[ newParent ] << "\n";
        }
    }
    return 0;
}

void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}