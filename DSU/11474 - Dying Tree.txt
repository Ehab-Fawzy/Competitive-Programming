// https://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=2469
// 11474 - Dying Tree


#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(NULL); cin.tie(NULL);
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const int mod = 7901;
const int MAX = 1e6 + 9;

struct DSU
{
    vii parent, Rank;
    DSU( ll N )
    {
        Rank.assign( N+9 , 0 ); parent.assign( N+9 , 0 );
        for ( int i = 1; i <= N; ++i ) parent[i] = i;
    }
    ll findSet ( ll i ) { return parent[i] == i ? i : (parent[i] = findSet(parent[i])); }
    bool isSame( ll i , ll j ) { return findSet(i) == findSet(j); }
    void unionSet( ll i , ll j )
    {
        if ( !isSame( i , j ) )
        {
            ll x = findSet(i) , y = findSet(j);
            if ( Rank[x] > Rank[y] ) parent[y] = x;
            else
            {
                parent[x] = y;
                if ( Rank[x] == Rank[y] ) Rank[y]++;
            }
        }
    }
};
ld getDistance( pii a , pii b )
{
    ld res = (a.F - b.F)*(a.F - b.F) + (a.S - b.S)*(a.S - b.S);
    res = sqrt( res ); return res;
}
ll q;

int main()
{
    cin >> q;
    while ( q-- )
    {
        ll n,m,k,d; cin >> n >> m >> k >> d;
        ll idx = 1 , idx2 = 1 , cnt = m;
        vector < pii > dr , tree; dr.resize(m);
        map < pii , ll > mp; map < ll , vector<pii> > save;

        bool ok = 1; pii st;
        for ( auto& i : dr ) cin >> i.F >> i.S , mp[ {i.F , i.S} ] = idx2++;
        for ( int i = 1; i <= n; ++i )
        {
            ll in; cin >> in; cnt += in;
            for ( int j = 0; j < in; ++j )
            {
                ll a , b; cin >> a >> b;
                save[ idx ].pb( {a , b} );
                mp[ {a , b} ] = idx2++;
                tree.pb( {a , b} );

                if ( ok ){ st = {a , b}; ok = 0; }
            }
            idx++;
        }

        DSU dsu(cnt);
        for ( auto i : save )
            for ( auto j : i.S ) dsu.unionSet( mp[j] , mp[i.S.front()] );

        for ( int i = 0; i < SZ(tree); ++i )
            for ( int j = i+1; j < SZ(tree); ++j )
            {
                ld distance = getDistance( tree[i] , tree[j] );
                if ( distance <= 1.0*k ) dsu.unionSet( mp[ tree[i] ] , mp[ tree[j] ] );
            }

        for ( auto i : dr )
            for ( auto j : tree )
            {
                ld distance = getDistance( i , j );
                if ( distance <= 1.0*d ) dsu.unionSet( mp[i] , mp[j] );
            }

        ok = 1;
        for ( auto i : dr )
        {
            if ( dsu.isSame( mp[i] , mp[ st ] ) )
            {
                cout << "Tree can be saved :)\n" , ok = 0; break;
            }
        }
        if ( ok ) cout << "Tree can't be saved :(\n";
    }
    return 0;
}

void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}
