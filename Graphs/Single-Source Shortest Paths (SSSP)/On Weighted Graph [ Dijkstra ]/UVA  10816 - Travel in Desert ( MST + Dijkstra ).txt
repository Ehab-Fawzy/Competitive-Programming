// 10816 - Travel in Desert
// https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1757

#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(NULL); cin.tie(NULL);
#define show(x) cerr << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const ll MOD = 1e9 + 7;
const ll MAX = 1e6 + 9;

struct DSU
{
    vii parent, Rank;
    DSU( ll N )
    {
        Rank.assign( N+9 , 0 ); parent.assign( N+9 , 0 );
        for ( int i = 0; i <= N; ++i ) parent[i] = i;
    }
    ll findSet ( ll i ) { return parent[i] == i ? i : (parent[i] = findSet(parent[i])); }
    bool isSame( ll i , ll j ) { return findSet(i) == findSet(j); }
    void unionSet( ll i , ll j )
    {
        if ( !isSame( i , j ) )
        {
            ll x = findSet(i) , y = findSet(j);
            if ( Rank[x] > Rank[y] ) parent[y] = x;
            else
            {
                parent[x] = y;
                if ( Rank[x] == Rank[y] ) Rank[y]++;
            }
        }
    }
};

struct MST_edge
{
    ll from , to; ld temp , dst;
    MST_edge( ll _from , ll _to , ld _temp , ld _dst ){
    from = _from; to = _to; temp = _temp; dst = _dst; }
    bool operator < ( const MST_edge e ) const {
    if ( temp == e.temp ) return dst < e.dst;
    return temp < e.temp; }
    friend ostream& operator << ( ostream& out , MST_edge e ){
    out << e.from << " " << e.to << " " << e.temp << " " << e.dst; return out; }
};

ld Kruskal( vector<MST_edge>& vec, ll n , ll src , ll dst )
{
    ld ret = 0; DSU d(n);
    for ( int i = 0; i < SZ(vec); ++i )
    {
        if ( d.isSame( src , dst ) ) break;
        if ( !d.isSame( vec[i].from , vec[i].to ) )
        {
             ret = max( ret , vec[i].temp );
             d.unionSet( vec[i].from , vec[i].to );
        }
    }
    return ret;
}

struct ssspEdge
{
    ll to; ld cost;
    ssspEdge( ll _to , ld _cost ){ to = _to; cost = _cost; }
    bool operator < ( const ssspEdge e ) const { return cost > e.cost; }
};

ll x , y , s , d;
vector < ssspEdge > adj[ (ll)(150) ];

pair < ld , vector<ld> > Dijkstra ( ll src )
{
    vector<ld> dist( x+9 , OO ) , path( x+9 , -1 );
    dist[src] = 0; path[src] = 0;
    priority_queue <ssspEdge> pq; pq.push( {src,  0} );

    while ( !pq.empty() )
    {
        ssspEdge e = pq.top(); pq.pop();
        if ( dist[e.to] <= e.cost )
        {
            for ( ssspEdge ne : adj[e.to] )
            {
                if ( dist[e.to] + ne.cost < dist[ne.to] )
                {
                    dist[ne.to] = dist[e.to] + ne.cost;
                    path[ne.to] = e.to;
                    pq.push( {ne.to , dist[ne.to]} );
                }
            }
        }
    }
    return { dist[d] , path };
}

void showPath( ll cur , vector<ld>& path , bool ok = 1 )
{
    if ( path[cur] == -1 ) return;
    showPath( path[cur] , path , 0 );
    cout << fixed << setprecision(1) << cur;
    if ( !ok ) cout << " ";
}

void Clear()
{
    for ( int i = 0; i < 150; ++i ) adj[i].clear();
}


int main()
{
    FASTIO //ONLINE__JUDGE();
    
    while ( cin >> x >> y && x+y > 0 )
    {
        cin >> s >> d; vector < MST_edge > vec;
        for ( int i = 0; i < y; ++i )
        {
            ll a , b; ld c ,dd; cin >> a >> b >> c >> dd;
            MST_edge e( a , b , c , dd ); vec.pb(e);
        }
        sort( all(vec) );
        ld mxTemp = Kruskal( vec, x+5 , s , d );
        for ( auto i : vec )
        {
            if ( i.temp <= mxTemp )
            {
                adj[ i.from ].pb( {i.to , i.dst} );
                adj[ i.to ].pb( {i.from , i.dst} );
            }
        }

        pair < ld , vector<ld> > ret = Dijkstra( s );
        showPath( d , ret.S ); cout << "\n";
        cout << ret.F << " " << mxTemp << "\n";
        Clear();
    }
    return 0;
}

void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}
