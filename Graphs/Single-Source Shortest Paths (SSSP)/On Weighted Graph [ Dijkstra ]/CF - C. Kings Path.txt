// C. King's PathC. King's Path
// https://codeforces.com/problemset/problem/242/C
// https://codeforces.com/contest/242/submission/55937246

#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(NULL); cin.tie(NULL);
#define show(x) cerr << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const ll MOD = 1e9 + 7;
const ll MAX = 1e6 + 9;

struct edge
{
    ll to , cost;
    edge ( ll _to , ll _cost ){ to = _to; cost = _cost; }
    bool operator < ( const edge e ) const { return cost > e.cost; }
    friend ostream& operator << ( ostream& out , edge e ){
    out << e.to << " " << e.cost; return out; }
};

pii src, DIST; ll x , idx;
map < pii , bool > mp , select;
queue<pii> can; map < pii , ll > id;
vector<edge> adj[MAX];

ll Dijkstra( ll src )
{
    vii dist( 1e6 , OO ); dist[src] = 0;
    priority_queue<edge> pq; pq.push({src , 0});

    while ( !pq.empty() )
    {
        edge e = pq.top(); pq.pop();
        if ( dist[e.to] <= e.cost )
        {
            for ( edge ne : adj[e.to] )
            {
                if ( dist[ne.to] > dist[e.to] + ne.cost )
                {
                    dist[ne.to] = dist[e.to] + ne.cost;
                    pq.push( {ne.to , dist[ne.to]} );
                }
            }
        }
    }
    return dist[ id[DIST] ];
}


int main()
{
    FASTIO ONLINE__JUDGE();

    cin >> src.F >> src.S >> DIST.F >> DIST.S >> x;
    for ( int i = 0; i < x; ++i )
    {
        ll row , st , ed; cin >> row >> st >> ed;
        for ( int col = st; col <= ed; col++ ) mp[{row , col}] = 1;
    }

    can.push( src ); bool ok = 0;
    while ( !can.empty() )
    {
        pii p = can.front(); can.pop();
        if ( p == DIST ) ok = 1;
        for ( int k = 0; k < 8; ++k )
        {
            pii np = { p.F + dx[k] , p.S + dy[k] };
            if ( mp.find( np ) != mp.end() && select.find(np) == select.end() )
                can.push(np) , select[np] = 1;
        }
    }

    if ( ok )
    {
        for ( auto i : select ) id[ i.F ] = ++idx;
        for ( auto i : select )
        {
            pii cur = i.F; ll curId = id[ cur ];
            for ( int k = 0; k < 8; ++k )
            {
                pii newCur = { cur.F + dx[k] , cur.S + dy[k] };
                if ( select.find(newCur) != select.end() )
                {
                    ll newCurId = id[ newCur ];
                    adj[ curId ].pb( {newCurId , 1} );
                }
            }
        }
        cout << Dijkstra( id[src] );
    }
    else cout << -1;

    return 0;
}

void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}
