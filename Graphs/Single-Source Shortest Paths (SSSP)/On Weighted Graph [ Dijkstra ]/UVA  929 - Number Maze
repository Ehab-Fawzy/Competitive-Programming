// 929 - Number Maze
// https://onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=870

#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(NULL); cin.tie(NULL);
#define show(x) cerr << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const ll MOD = 1e9 + 7;
const ll MAX = 1e3 + 9;

struct edge
{
    ll to , cost;
    edge( ll _to , ll _cost ){ to = _to; cost = _cost; }
    friend ostream& operator << ( ostream& out , edge e ){ out << e.to << " " << e.cost; return out; }
    bool operator < ( const edge& e ) const { return cost > e.cost; }
};
ll arr[MAX][MAX] , cnt[MAX][MAX] , q , x ,y;
vector <edge> adj[MAX*MAX];
void Clear()
{
    for ( int i = 0; i < MAX*MAX; ++i ) adj[i].clear();
}
bool isOk( ll i , ll j )
{
    return i >= 1 && i <= x && j >= 1 && j <= y;
}

ll Dijkstra( ll src )
{
    vii dist( MAX*MAX , OO ); dist[src] = 0;
    priority_queue<edge> pq; pq.push( {src , 0} );
    while ( !pq.empty() )
    {
        edge e = pq.top(); pq.pop();
        if  ( e.cost > dist[ e.to ] ) continue;
        for ( edge ne : adj[ e.to ] )
        {
            if ( dist[e.to]+ne.cost < dist[ne.to] )
            {
                dist[ne.to] = ne.cost+dist[e.to];
                pq.push( {ne.to , dist[ne.to]} );
            }
        }
    }
    return dist[ cnt[x][y] ] + arr[1][1];
}

int main()
{
    FASTIO //ONLINE__JUDGE();

    cin >> q;
    while ( q-- )
    {
        cin >> x >> y; Clear(); ll idx = 1;
        for ( int i = 1; i <= x; ++i )
            for ( int j = 1; j <= y; ++j )
                cin >> arr[i][j] , cnt[i][j] = idx++;

        for ( int i = 1; i <= x; ++i )
            for ( int j = 1; j <= y; ++j )
                for ( int k = 0; k < 4; ++k )
                    if ( isOk( i+dx[k] , j+dy[k] ) )
                        adj[ cnt[i][j] ].pb({ cnt[ i+dx[k] ][ j+dy[k] ] , arr[ i+dx[k] ][ j+dy[k] ] });
                        
        cout << Dijkstra( cnt[1][1] ) << "\n";
    }
    return 0;
}

void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}
