// http://codeforces.com/contest/25/problem/D
// D. Roads not only in Berland


#include <bits/stdc++.h>
#include <cstdio>
#include <cstring>
#include <cstdlib>

#define FASTIO ios::sync_with_stdio(NULL); cin.tie(NULL);
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define vss vector  <string>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define PI  3.141592654
#define OO (ll)1e18
using namespace std;
void ONLINE__JUDGE();

pii swapii( pii pr ){ return { pr.S , pr.F }; }
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const int mod = 7901;
const int MAX = 1e6 + 9;

struct DSU
{
    vii parent, Rank;
    DSU( ll N )
    {
        Rank.assign( N+9 , 0 ); parent.assign( N+9 , 0 );
        for ( int i = 1; i <= N; ++i ) parent[i] = i;
    }
    ll findSet ( ll i ) { return parent[i] == i ? i : (parent[i] = findSet(parent[i])); }
    bool isSame( ll i , ll j ) { return findSet(i) == findSet(j); }
    void unionSet( ll i , ll j )
    {
        if ( !isSame( i , j ) )
        {
            ll x = findSet(i) , y = findSet(j);
            if ( Rank[x] > Rank[y] ) parent[y] = x;
            else
            {
                parent[x] = y;
                if ( Rank[x] == Rank[y] ) Rank[y]++;
            }
        }
    }
};
struct format
{
    ll a , b , c , d;
    format( ll _a , ll _b , ll _c , ll _d ){ a = _a; b = _b; c = _c; d = _d; }
    friend ostream& operator << ( ostream& out , format obj )
    {
        out << obj.a << " " << obj.b << " " << obj.c << " " << obj.d;
        return out;
    }
};

ll x; vector < pair < ll , pii > > del; 
vector < format > vec;

int main()
{
    FASTIO ONLINE__JUDGE();

    cin >> x; DSU d(x);
    for ( int i = 0; i < x-1; i++ )
    {
        ll a ,b; cin >> a >> b;
        if ( d.isSame( a , b ) ) del.pb( { d.findSet(a) , {a , b} } );
        else d.unionSet(a, b );
    }

    set < ll > s;
    for ( int i = 1; i <= x; ++i ) s.insert( d.findSet(i) );
    while ( SZ(s) > 1 && !del.empty() )
    {
        ll parentA = d.findSet( del.back().F ); pii con = del.back().S; del.pop_back();
        if ( parentA != d.findSet( *s.begin() ) )
        {
            ll parentB = d.findSet( *s.begin() ); s.erase( s.begin() ); s.erase( parentA );
            d.unionSet( parentA , parentB );

            ll newParent = (d.findSet(parentA) == parentA && d.findSet(parentB) == parentA ? parentA : parentB);
            s.insert( newParent );

            format o( con.F , con.S , parentA , parentB ); vec.pb(o);
        }
        else
        {
            auto it = s.end(); it--;
            ll parentB = d.findSet( *it ); s.erase( it ); s.erase( parentA );
            d.unionSet( parentA , parentB );

            ll newParent = (d.findSet(parentA) == parentA && d.findSet(parentB) == parentA ? parentA : parentB);
            s.insert( newParent );

            format o( con.F , con.S , parentA , parentB ); vec.pb(o);
        }
    }

    cout << SZ(vec) << "\n";
    for ( auto i : vec ) cout << i << "\n";
    return 0;
}

void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}