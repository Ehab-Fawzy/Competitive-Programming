struct DSU
{
    vii parent, Rank;
    DSU( ll N )
    {
        Rank.assign( N+9 , 0 ); parent.assign( N+9 , 0 );
        for ( int i = 0; i <= N; ++i ) parent[i] = i;
    }
    ll findSet ( ll i ) { return parent[i] == i ? i : (parent[i] = findSet(parent[i])); }
    bool isSame( ll i , ll j ) { return findSet(i) == findSet(j); }
    void unionSet( ll i , ll j )
    {
        if ( !isSame( i , j ) )
        {
            ll x = findSet(i) , y = findSet(j);
            if ( Rank[x] > Rank[y] ) parent[y] = x;
            else
            {
                parent[x] = y;
                if ( Rank[x] == Rank[y] ) Rank[y]++;
            }
        }
    }
};


struct edge
{
    ll from,to; ld cost;
    edge(){ from = to = cost = 0; }
    edge( ll _from , ll _to , ld _cost ){ from = _from; to = _to; cost = _cost; }
    bool operator < ( const edge &t ) const { return cost > t.cost; }
    friend ostream& operator << ( ostream& out , edge e )
    {
        out << e.from << " " << e.to << " " << fixed << setprecision(10) << e.cost; return out;
    }
};


pair < ld , vector<edge> > Kruskal( vector < edge >& vec , ll n )
{
    ld cost = 0; vector < edge > ret; DSU d(n);
    for ( int i = SZ(vec)-1; i >= 0; --i )
    {
        if ( !d.isSame( vec[i].from , vec[i].to ) )
        {
            cost += vec[i].cost; d.unionSet( vec[i].from , vec[i].to );
            ret.pb( vec[i] );
        }
    }
    return {cost , ret};
}


