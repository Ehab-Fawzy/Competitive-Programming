class unw_tree{
public:
    int sz , k , id;
    vector<vector<int>> adj , up;
    vector<int> st , en , len;
    void init(int n){
        id = -1;
        k = 1 + (int)log2(n);
        sz = n + 2; adj.resize(sz);
        up.resize(sz , vector<int>(k));
        st.resize(sz); en.resize(sz); len.resize(sz);
    }
    void addEdge(int u , int v){
        adj[u].pb(v); adj[v].pb(u);
    }

    void euler(int u , int p , int _len = 0){
        st[u] = ++id; len[u] = _len; up[u][0] = p;
        rep(lg,1,k) up[u][lg] = up[ up[u][lg - 1] ][lg - 1];
        for ( int v : adj[u] ) if (v != p) euler(v, u);
        en[u] = id;
    }
    bool is_ancestor(int u, int v){
        return st[u] <= st[v] and en[u] >= en[v];
    }
    int lca( int u, int v ){
        if ( is_ancestor(u, v) ) return u;
        if ( is_ancestor(v, u) ) return v;
        rev(lg,k-1,-1) if (!is_ancestor( up[u][lg] , v )) u = up[u][lg];
        return up[u][0];
    }
    int distance(int u, int v){
        return len[u] + len[v] - (len[lca(u, v)] << 1);
    }
};