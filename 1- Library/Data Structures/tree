struct tree{
    vector<int> adj[N];
    void addEdge( int u, int v ) {
        adj[u].pb(v); adj[v].pb(u);
    }
    int st[N] , en[N] , up[N][k] , len[N] , id = -1;
    void euler( int u , int par , int dist = 0 ){
        st[u] = ++id; up[u][0] = par; len[u] = dist;
        rep(lg,1,k) up[u][lg] = up[ up[u][lg - 1] ][lg - 1];
        for ( int v : adj[u] ) if (v != par) euler(v , u , dist + 1);
        en[u] = id;
    }
    bool is_ancestor( int u , int v ){
        return st[u] <= st[v] and en[u] >= en[v];
    }
    int lca(int u , int v){
        if ( is_ancestor(u , v) ) return u ;
        if ( is_ancestor(v , u) ) return v ;
        rev(lg,k-1,-1) if ( !is_ancestor(up[u][lg] , v) ) u = up[u][lg];
        return up[u][0];
    }
    int distance(int u , int v){
        return len[u] + len[v] - (len[lca(u , v)] << 1);
    }
};