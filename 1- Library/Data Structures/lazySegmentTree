template <class T>
class segmentTree{
private:
    // Dynamic Section
    void build_set(int idx , int l){
        segment[idx] = arr[l];
    }
    void point_change_set(int idx , T val){
        segment[idx] = val;
    }
    T combine(T lf , T ri){
        return min(lf , ri);
    }
    T dummy(){
        return 2e9;
    }
    void push_down( int idx , int l , int r , int lf , int ri ){
        if ( lazy[idx] ){
            segment[idx] += lazy[idx] * (r - l + 1);
            if ( l != r ){
                lazy[lf] += lazy[idx];
                lazy[ri] += lazy[idx];
            }
            lazy[idx] = 0;
        }
    }
    void range_update_set( int idx , int l , int r , int lf , int ri , T val ){
        segment[idx] += val * (r - l + 1);
        if ( l != r ) lazy[lf] += val , lazy[ri] += val;
    }

    // static section
    void build(int idx , int l , int r){
        int lf = (idx << 1) , mid = (l + r) >> 1 , ri = lf + 1;
        if ( l == r ) build_set(idx , l);
        else{
            build(lf, l, mid);
            build(ri , mid + 1 , r);
            segment[idx] = combine(segment[lf] , segment[ri]);
        }
    }
    void point_update( int pos , T val , int idx , int l , int r ){
        int lf = (idx << 1) , mid = (l + r) >> 1 , ri = lf + 1;
        push_down(idx , l , r , lf , ri);
        if ( l == r ) point_change_set(idx , val);
        else{
            if ( pos <= mid ) point_update(pos , val , lf , l , mid);
            else point_update(pos , val , ri , mid + 1 , r);
            segment[idx] = combine(segment[lf] , segment[ri]);
        }
    }
    void range_update( int s , int e , T val , int idx , int l , int r ){
        int lf = (idx << 1) , mid = (l + r) >> 1 , ri = lf + 1;
        push_down(idx , l , r , lf , ri);

        if      ( s  > r || e  < l ) return ;
        else if ( l >= s && r <= e ) range_update_set(idx , l , r , lf , ri , val);
        else{
            range_update(s , e , val , lf , l , mid);
            range_update(s , e , val , ri , mid + 1 , r);
            segment[idx] = combine(segment[lf] , segment[ri]);
        }
    }
    T ask(int s , int e , int idx , int l , int r){
        int lf = (idx << 1) , mid = (l + r) >> 1 , ri = lf + 1;
        push_down(idx , l , r , lf , ri);
        if      ( s >  r || e <  l ) return dummy();
        else if ( l >= s && r <= e ) return segment[idx];
        else{
            return combine( ask(s,e,lf,l,mid) , ask(s,e,ri,mid+1,r));
        }
    }
public:
    vector<T> segment , lazy; int sz;
    void init(int n){
        sz = n;
        segment.resize(4 * sz);
        lazy.resize(4 * sz);
    }
    void build(){ build(1 , 0 , sz - 1); }
    void point_update(int pos , T val){ point_update(pos , val , 1 , 0 , sz - 1); }
    void range_update(int s , int e , T val){ range_update(s , e , val , 1 , 0 , sz - 1); }
    T ask(int s , int e){ return ask(s,e,1,0,sz-1); }
};