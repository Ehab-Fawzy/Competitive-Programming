// H. Subsequences (hard version)
// https://codeforces.com/contest/1183/problem/H

/**
    we need to count the number of unique subsequences of length K in string s. 
    solve this subproblem using dynamic programming :- 
    
    let us define dp[ ed ][ k ] : the number of unique subsequences of length K in string S in substring [1 , ed] inclusive.
    the base case of the recurrence is at any postion the number of unique subsequences of length 0 is 1.
    
    base case   : { dp[ ed ][ 0 ] = 1 , âˆ€ ed }
    recurrence  : dp[ ed ][ k ] = dp[ed - 1][k] + dp[ed - 1][k - 1] - dp[ lst - 1 ][k - 1];
    
    dp[ ed  - 1 ][ k ]     -> the number of unique subsequences of length K , in substring [1 , ed-1] inclusive 
    dp[ ed  - 1 ][ k - 1 ] -> the number of unique subsequences of length K - 1 , in substring [1 , ed-1] inclusive
    dp[ lst - 1 ][ k - 1 ] -> the number of unique subsequences of length K - 1 , in substring [1 , lst - 1 ] inclusive , 
                              where lst is the index of the last charater equal to the current character 
                              NOTE: if you don't have previous char equal to the current charater , subtract ZERO
                             
**/

#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp> // Common file
#include <ext/pb_ds/tree_policy.hpp>
#include <functional> // for less

#pragma GCC optimize ("O3")
#pragma GCC optimize("Ofast")
#pragma GCC optimize ("unroll-loops")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")

#define FASTIO ios::sync_with_stdio(0); cin.tie(0);
#define show(x) cerr << #x << " = " << x << "\n"
#define mem( a , b ) memset( a , b , sizeof a )
#define popcnt(x) __builtin_popcount(x)
#define all(x) x.begin() , x.end()
#define mod(x,m) ((x%m + m )%m)
#define SZ(a) (int)a.size()
#define ll  long long
#define ld  long double
#define vii vector  <ll>
#define dqi deque   <ll>
#define sii set     <ll>
#define vpi vector  <pii>
#define mii map     <ll,ll>
#define pii pair    <ll,ll>
#define pi  pair    <int,int>
#define pb  push_back
#define F   first
#define S   second
#define L   length()
#define OO  (ll)1e18
#define EPS 1e-9
using namespace std;
using namespace __gnu_pbds;
void ONLINE__JUDGE();

typedef tree<ll, null_type, less<ll>, rb_tree_tag,
tree_order_statistics_node_update> ordered_set;
pii swapii( pii pr ){ return { pr.S , pr.F }; }
ll binEXP( ll x , ll pw , ll MOD = LLONG_MAX );
int dx[] = {  0 ,  0 , -1 , +1 , -1 , +1 , -1 , +1 };
int dy[] = { -1 , +1 ,  0 ,  0 , -1 , +1 , +1 , -1 };

const ll MOD = 1e9 + 7;
const ll MAX = 30000 + 7;

const int N = 200;

ll x,y; string s;
ll dp[N][N];

int main()
{
    FASTIO ONLINE__JUDGE();

    cin >> x >> y >> s;
    for ( int i = 0; i < N; ++i ) dp[i][0] = 1;
    for ( int k = 1; k < N; ++k ){
        dp[k - 1][k] = 1; vii lst( 27 , -1 );
        for ( int j = 0; j < k; ++j ){
            lst[ s[j] - 'a' ] = j;
        }
        for ( int ed = k; ed < x; ++ed ){
            dp[ed][k] = dp[ed - 1][k] + dp[ed - 1][k - 1];
            if ( lst[ s[ed] - 'a' ] > -1 ){
                if ( k - 1 == 0 ) dp[ed][k]--;
                else if ( lst[ s[ed] - 'a' ] - 1 > -1 && k-1 > -1 ){
                    dp[ed][k] -= dp[ lst[ s[ed] - 'a' ] - 1 ][k - 1];
                }
            }
            lst[ s[ed] - 'a' ] = ed;
        }
    }

    y--; ll cnt = 0 , cur = x-1;
    while ( y > 0 ){
        if ( cur < 0 ){
            return cout << -1 , 0;
        }

        ll mn = min( y , dp[x - 1][cur] );
        y -= mn; cnt += mn*(x - cur); cur--;
    }
    cout << cnt;
    return 0;
}


void ONLINE__JUDGE()
{
    #ifndef ONLINE_JUDGE
    freopen( "inp.c"         , "r" , stdin  );
    //freopen( "OutPut.txt"   , "w" , stdout );
    #endif // ONLINE_JUDGE
}

ll binEXP( ll x , ll pw , ll MOD )
{ ll res=1; while(pw>0){ pw%2 ? res *= x : 0; x *= x; x%=MOD; pw /= 2; res%= MOD; } return res%=MOD; }
